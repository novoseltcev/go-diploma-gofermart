// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/domains/balance/service.go

// Package mock_balance is a generated GoMock package.
package mock_balance

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/novoseltcev/go-diploma-gofermart/gophermart/models"
	reflect "reflect"
)

// MockBalanceStorager is a mock of BalanceStorager interface
type MockBalanceStorager struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStoragerMockRecorder
}

// MockBalanceStoragerMockRecorder is the mock recorder for MockBalanceStorager
type MockBalanceStoragerMockRecorder struct {
	mock *MockBalanceStorager
}

// NewMockBalanceStorager creates a new mock instance
func NewMockBalanceStorager(ctrl *gomock.Controller) *MockBalanceStorager {
	mock := &MockBalanceStorager{ctrl: ctrl}
	mock.recorder = &MockBalanceStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBalanceStorager) EXPECT() *MockBalanceStoragerMockRecorder {
	return m.recorder
}

// GetBalance mocks base method
func (m *MockBalanceStorager) GetBalance(ctx context.Context, userID models.UserID) (models.Money, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(models.Money)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance
func (mr *MockBalanceStoragerMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceStorager)(nil).GetBalance), ctx, userID)
}

// UpdateBalance mocks base method
func (m *MockBalanceStorager) UpdateBalance(ctx context.Context, userID models.UserID, value models.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, userID, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance
func (mr *MockBalanceStoragerMockRecorder) UpdateBalance(ctx, userID, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockBalanceStorager)(nil).UpdateBalance), ctx, userID, value)
}

// GetTotalWithrawn mocks base method
func (m *MockBalanceStorager) GetTotalWithrawn(ctx context.Context, userID models.UserID) (models.Money, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalWithrawn", ctx, userID)
	ret0, _ := ret[0].(models.Money)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalWithrawn indicates an expected call of GetTotalWithrawn
func (mr *MockBalanceStoragerMockRecorder) GetTotalWithrawn(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalWithrawn", reflect.TypeOf((*MockBalanceStorager)(nil).GetTotalWithrawn), ctx, userID)
}

// GetUserWithdrawals mocks base method
func (m *MockBalanceStorager) GetUserWithdrawals(ctx context.Context, userID models.UserID) ([]models.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals
func (mr *MockBalanceStoragerMockRecorder) GetUserWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockBalanceStorager)(nil).GetUserWithdrawals), ctx, userID)
}

// CreateWithdrawal mocks base method
func (m *MockBalanceStorager) CreateWithdrawal(ctx context.Context, userID models.UserID, sum models.Money, order string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", ctx, userID, sum, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal
func (mr *MockBalanceStoragerMockRecorder) CreateWithdrawal(ctx, userID, sum, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockBalanceStorager)(nil).CreateWithdrawal), ctx, userID, sum, order)
}
